@using Kendo.Mvc.UI
@using SalesHub.Client.ViewModels
@using SalesHub.Client.ViewModels.Api
@model SalesHub.Client.ViewModels.Client.IndexViewModel
@{
    ViewBag.Title = "Home";
}

@functions
{
    public static Dictionary<string, object> BuildAttributesForItem(SellingCompanyTreeViewItem item)
    {
        var attributes = new Dictionary<string, object>();
        
        if (item.CustomerId.HasValue)
        {
            attributes.Add("data-customer-id", item.CustomerId.Value.ToString());
        }
        if (!String.IsNullOrEmpty(item.Path))
        {
            attributes.Add("data-path", item.Path);
        }
        return attributes;
    } 
}

<div class="left-column">
    @Html.Kendo().TreeView().Name("customerTreeView").BindTo(Model.TreeViewRoot.Items, mapping => mapping
        .For<SellingCompanyTreeViewItem>(binding => binding
            .Children(c => c.Items)
            .ItemDataBound((item, c) => {
                item.Text = c.Text;
                item.Expanded = c.Expanded;

                var attributes = BuildAttributesForItem(c);
                foreach (var attr in attributes)
                {
                    item.HtmlAttributes.Add(attr);
                }
            })
        ))
</div>

<div class="customer-grid right-column">
    @(Html.Kendo().Grid<CustomerOrderViewModel>().Name("ordersGrid")
        .Columns(columns =>
        {
            columns.Bound(p => p.OrderNumber).Title("Order Number");
            columns.Bound(p => p.OrderDate).Title("Order Date").Format("{0:d}");
            columns.Bound(p => p.IsActive).Title("Status").ClientTemplate("#= IsActive ? 'Active' : 'Inactive' #");
            columns.Bound(p => p.Weight).Title("Weight").Format("{0:n}");
            columns.Bound(p => p.Value).Title("Value").Format("{0:c}");
            columns.Template(model => null)
                .ClientTemplate("<a href='" + Url.RouteUrl("Default", new { controller = "Order", action = "Edit" }) + "/#= OrderId #'>Edit</a>");
        })
        .ToolBar(toolbar => toolbar.Template("<a id='createOrderButton' class='k-button k-button-icontext k-grid-add' href='#'>Create order</a>"))
        .Filterable()
        .Selectable(settings => settings.Mode(GridSelectionMode.Single))
        .Pageable(builder => builder.PageSizes(new[] { 20, 30 }))
        .DataSource(dataSource => dataSource
            .Ajax()
            .Read(builder => builder.Url("/api/CustomerOrders/GetOrdersForCustomer/").Type(HttpVerbs.Get))
            .Model(model => model.Id("OrderId"))
            .ServerOperation(true)
            .PageSize(20)
        ))
</div>

@section scripts {
    <script>
        window.SalesHub.createOrderUrl = "@Url.RouteUrl("Default", new { controller = "Order", action = "New" }, Request.Url.Scheme)";
    </script>
    <script src="@Url.Content("~/Scripts/home.js")" type="text/javascript"></script>
}
