@using System.Web.Mvc.Html;
@using Kendo.Mvc.UI;
@using SalesHub.Client.Configuration
@using SalesHub.Client.Extensions;
@using SalesHub.Core.Models;
@using SalesHub.Client.ViewModels.Api;

@model SalesHub.Client.ViewModels.Client.OrderViewModel

@if (Model.SavedSuccessfully)
{
    <p class="success">Order saved successfully</p>
}

<fieldset class="editorder left-column">
    <div>
        @Html.LabelFor(m => m.OrderNumber, "Order No:")
        @Html.TextBoxFor(m => m.OrderNumber, new { @class = "k-textbox" })
        @Html.ValidationMessageFor(m => m.OrderNumber)
    </div>

    <div>
        @Html.LabelFor(m => m.ContractWeight, "Contract Weight:")
        @Html.Kendo().NumericTextBoxFor(m => m.ContractWeight).Decimals(2).Min(1).Deferred()
        @Html.ValidationMessageFor(m => m.ContractWeight)
    </div>

    <div>
        @Html.LabelFor(m => m.OrderDate, "Order Date:")
        @Html.Kendo().DatePickerFor(m => m.OrderDate).Deferred()
        @Html.ValidationMessageFor(m => m.OrderDate)
    </div>

    <div>
        @Html.LabelFor(m => m.ContractAmount, "Contract Amount:")
        @Html.Kendo().NumericTextBoxFor(m => m.ContractAmount).Decimals(2).Min(1).Deferred()
    </div>

    <div>
        @Html.LabelFor(m => m.IsActive, "Is Active:")
        @Html.CheckBoxFor(m => m.IsActive)
    </div>

    <div>
        @Html.LabelFor(m => m.UnitOfWeight, "Unit of Weight:")
        @Html.RadioButtonForEnum(m => m.UnitOfWeight, !Model.IsNew ? new { disabled = true } : null)
    </div>

    <div>
        @Html.LabelFor(m => m.CurrencyTypeId, "Invoicing Currency:")
        @Html.Kendo().DropDownListFor(m => m.CurrencyTypeId).BindTo(Model.CurrencyTypesSelectList).Deferred()
    </div>
</fieldset>

<div class="right-column">
    @if (!Model.IsNew)
    {
        <div id="detailLinesTabStrip">
            <ul>
                <li class="k-state-active">Details</li>
                <li>Notes</li>
            </ul>
            <div>
                @(Html.Kendo().Grid<OrderDetailViewModel>()
                    .Name("orderDetailsGrid")
                    .Columns(columns =>
                    {
                        columns.Bound(p => p.Origin).Title("Origin").Filterable(false);
                        columns.Bound(p => p.Units).Title("Units").Filterable(false).ClientFooterTemplate("Total units: #= sum #");
                        columns.Bound(p => p.UnitWeight).Title("Unit Weight").Filterable(false).ClientTemplate("#= kendo.format('{0:n0} " + (Model.UnitOfWeight == UnitOfWeight.Pounds ? "lbs" : "kg") + "', UnitWeight) #");
                        columns.Bound(p => p.NetWeight).Title("Net Wt").Filterable(false).ClientFooterTemplate("Total weight: #= kendo.toString(sum, 'n') #").ClientTemplate("#= kendo.format('{0:n} " + (Model.UnitOfWeight == UnitOfWeight.Pounds ? "lbs" : "kg") + "', NetWeight) #");
                        columns.Bound(p => p.PricePerUnitOfWeight).Title("Price").ClientTemplate("#= kendo.toString(PricePerUnitOfWeight, 'c2') #").Filterable(false);
                        columns.Bound(p => p.TotalAmount).Title("Amount").ClientTemplate("#= kendo.toString(TotalAmount, 'c2') #").ClientFooterTemplate("Total amount: #= kendo.toString(sum, 'c2') #");
                        columns.Command(command => { command.Edit().Text("<span class='command'>Edit</span>"); command.Destroy().Text("<span class='command'>Delete</span>"); });
                    })
                    .Filterable()
                    .ToolBar(toolbar => toolbar.Create())
                    .Editable(editable => editable.Mode(GridEditMode.PopUp))
                    .Selectable(settings => settings.Mode(GridSelectionMode.Single))
                    .Events(events => events.Save("window.SalesHub.OrderDetailsGrid_Save"))
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .Read(builder => builder.Url(SettingsManager.BaseServiceUrl + "/CustomerOrderDetails/GetOrderDetails/" + Model.OrderId).Type(HttpVerbs.Get))
                        .Create(builder => builder.Url(SettingsManager.BaseServiceUrl + "/CustomerOrderDetails/CreateOrderDetail/" + Model.OrderId).Type(HttpVerbs.Put))
                        .Update(builder => builder.Url(SettingsManager.BaseServiceUrl + "/CustomerOrderDetails/UpdateOrderDetail").Type(HttpVerbs.Post))
                        .Destroy(builder => builder.Url(SettingsManager.BaseServiceUrl + "/CustomerOrderDetails/DeleteOrderDetail").Type(HttpVerbs.Delete))
                        .Model(model => {
                            model.Id(x => x.OrderDetailId);
                            model.Field(m => m.OrderDetailId).DefaultValue(0);
                        })
                        .Events(events =>  events.Error("window.SalesHub.OrderDetails_Error"))
                        .ServerOperation(false)
                        .Aggregates(a => a.Add(x => x.Units).Sum())
                        .Aggregates(a => a.Add(x => x.NetWeight).Sum())
                        .Aggregates(a => a.Add(x => x.TotalAmount).Sum())
                    ).Deferred())
            </div>
            <div>
                @(Html.Kendo().Grid<OrderNoteViewModel>()
                    .Name("orderNotesGrid")
                    .Columns(columns =>
                    {
                        columns.Bound(p => p.PostedDate).Title("Date").ClientTemplate("#= kendo.toString(PostedDate, 'G') #");
                        columns.Bound(p => p.Author).Title("Author");
                        columns.Bound(p => p.Note).Title("Note");
                    })
                    .Editable(editable => editable.Mode(GridEditMode.PopUp))
                    .ToolBar(toolbar => toolbar.Create())
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .Read(builder => builder.Url(SettingsManager.BaseServiceUrl + "/OrderNotes/GetOrderNotesForOrder/" + Model.OrderId).Type(HttpVerbs.Get))
                        .Create(builder => builder.Url(SettingsManager.BaseServiceUrl + "/OrderNotes/CreateOrderNote/" + Model.OrderId).Type(HttpVerbs.Put))
                        .Model(model =>
                        {
                            model.Id("OrderNoteId");
                            model.Field(m => m.OrderNoteId).DefaultValue(0);
                        })
                        .ServerOperation(false)
                    ).Deferred())
            </div>
        </div>
        @Html.Kendo().TabStrip().Name("detailLinesTabStrip").Deferred()

        <script type="text/x-kendo-template" id="orderDetailsValidationMessageTemplate">
            # if (messages.length) { #
                <li>#=field#
                    <ul>
                        # for (var i = 0; i < messages.length; ++i) { #
                            <li>#= messages[i] #</li>
                        # } #
                    </ul>
                </li>
            # } #
        </script>
    }
    <ul id="panelBar">
        <li>
            Payment Terms
            @Html.PartialFor("_OrderPaymentTerm", m => m.PaymentTerm1)
            @Html.PartialFor("_OrderPaymentTerm", m => m.PaymentTerm2)
            <div>
                @Html.LabelFor(m => m.PaymentTermsOverride, "Payment Term Override:")
                @Html.TextAreaFor(m => m.PaymentTermsOverride, new { @class = "k-textbox" })

                <input type="button" value="Suggested Value" id="suggestedValueButton" />
                @(Html.Kendo().Window()
                    .Name("suggestedValuesWindow")
                    .Visible(false)
                    .Title("Suggested Values")
                    .Width(600)
                    .Modal(true)
                    .Content(@<text>
                        @(Html.Kendo().Grid<SuggestedValue>()
                        .Name("suggestedValuesGrid")
                        .Columns(columns => columns.Bound(c => c.Value))
                        .BindTo(Model.SuggestedValues)
                        .DataSource(dataSource => dataSource
                            .Server()
                            .Model(model => model.Id(m => m.SuggestedValueId)))
                        .Selectable()
                        .Events(events => events.Change("window.SalesHub.SuggestedValuesGrid_Changed")).Deferred())
                    </text>).Deferred())
            </div>
        </li>
        <li>
            Comments
            <div>
                <div>
                    @Html.LabelFor(m => m.IntentComments, "Intent Comments:")
                    @Html.TextAreaFor(m => m.IntentComments, new { @class = "k-textbox" })
                </div>
                <div>
                    @Html.LabelFor(m => m.IntentComments, "Invoice Comments:")
                    @Html.TextAreaFor(m => m.InvoiceComments, new { @class = "k-textbox" })
                </div>
                <div>
                    @Html.LabelFor(m => m.HeaderComments, "Header Comments:")
                    @Html.TextAreaFor(m => m.HeaderComments, new { @class = "k-textbox" })
                </div>
                <div>
                    @Html.LabelFor(m => m.FooterComments, "Footer Comments:")
                    @Html.TextAreaFor(m => m.FooterComments, new { @class = "k-textbox" })
                </div>
            </div>
        </li>
    </ul>
    @Html.Kendo().PanelBar().Name("panelBar").Deferred()
</div>

@Html.HiddenFor(m => m.OrderId)

<div class="editbuttons">
    <input type="submit" name="submit" value="Save"/>
    <input type="button" name="cancel" value="Cancel" class="actionButton" data-action="@(Html.Raw(Url.RouteUrl("Default", new { action = "Index", controller = "Home", customerId = Model.CustomerId }, Request.Url.Scheme)))"/>
    @if (!Model.IsNew) {
        <input type="button" name="delete" value="Delete" id="delete"/>
    }
</div>